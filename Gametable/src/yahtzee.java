import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.SpringLayout;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

/**
 *yahtzee icon from http://www.spokesman.com/blogs/tech-deck/2015/mar/02/how-about-yahtzee/  accessed 11/6/2018 @ 4:53 pm
 * @author kyle
 */
public class yahtzee extends javax.swing.JFrame {

    static Image backImage;
    private final int ROW_NUM=17;
    int[] numbers=new int[5];
    int tableX=0;
    private int numOfPlayers=3;
    int playerTurn=1;
    private int rolls;
    private int rounds=0;
    private TableCellEditor cellEditor;
    private boolean aDouble=false, aTriple=false;
    private String[] names= {"Scores", "Player 1", "Player 2", "Player 3"};
//    ArrayList<TableColumn> playerScores= new ArrayList<TableColumn>();
    DefaultTableModel tableStyle;
    int[][] scoreArray=new int[16][numOfPlayers];
    String[] titles={ "Ones", "Twos", "Threes", "Fours", "Fives","Sixes", "Sum",
        "Bonus", "Three of a Kind", "Four of a Kind", "Full House", "Small straight",
        "Large straight", "Chance", "YAHTZE", "TOTAL SCORE"};
    
    /**
     * Creates new form yahtzee
     */
    public yahtzee() 
    {
        initComponents();
        tableX = jPanel1.getWidth()-scoreTable.getWidth();
        System.out.println(scoreTable.getWidth());
        myInit();
//        players=numberOfPlayers;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        scoresBox = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scoreTable.setEditingColumn(2);
        scoreTable.setEditingRow(2);
        scoreTable.setGridColor(java.awt.Color.black);
        scoreTable.setRequestFocusEnabled(false);
        scoreTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                scoreTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(scoreTable);

        jButton1.setText("Click Me");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });

        scoresBox.setEditable(false);
        scoresBox.setColumns(20);
        scoresBox.setRows(1);
        jScrollPane2.setViewportView(scoresBox);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * handles checking of table and triggers turn change, and score capture
     * @param evt 
     */
    private void scoreTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scoreTableMouseReleased
        // TODO add your handling code here:
        // finds row and column of click
        int selRow=scoreTable.rowAtPoint(evt.getPoint());
        int selCol=scoreTable.columnAtPoint(evt.getPoint());
        String seld=scoreTable.getValueAt(selRow, selCol).toString();
        if(/*(scoreArray[selRow][playerTurn-1]!=-1)&&*/(selCol==playerTurn)&&(!seld.equals("")))
        {
            System.out.println("rc+"+selRow+", "+selCol);
            System.out.println("check "+scoreArray[selRow][playerTurn-1]);
            System.out.println(seld);
            scoreArray[selRow][playerTurn-1]=Integer.parseInt(seld);
            scoreArray[15][playerTurn-1]+=scoreArray[selRow][playerTurn-1];
            clearBoxes(0);
            nextPlayer(scoreArray[15][playerTurn-1]);
        }
    }//GEN-LAST:event_scoreTableMouseReleased
 
    /**
     * pseudo roll on button click
     * change this to implement roll from team
     * @param evt 
     */
    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        // TODO add your handling code here:
        if(rolls<3)
        {   System.out.println("clicked");
            String temp="";
            aDouble=false;
            aTriple=false;
            for (int i=0;i<numbers.length;i++)
            {
                numbers[i]=((int)(6*Math.random()))+1;
                temp+=numbers[i]+", ";   
            }
        
//          numbers= new int[]{2,3,2,3,2};
            scoresBox.setText(temp);
            clearBoxes(0);
            updateBoxes();
            rolls++;
        }
    }//GEN-LAST:event_jButton1MouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(yahtzee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(yahtzee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(yahtzee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(yahtzee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new yahtzee().setVisible(true);
            }
        });
    }
    /**
     * Netbeans IDE wont allow correction of it's IDE made and handled init 
     * so this is myInit sets style for Jtable, sets table items editable to false
     * sets alignment of table to be right wall, makes table size static
     * sets initial values for arrays, adds player names to columns 
     */
    private void myInit()
    {
		//background Image for table
     backImage = new ImageIcon("Images/TableBackground.jpg").getImage();
     
//   scoreTable.remove;
      TableColumn rowIdentifier=new TableColumn();
      TableColumn temp;
      tableStyle = new DefaultTableModel(names, 16){
        public boolean isCellEditable(int row, int column){
            return false;}};
      
      scoreTable.setAlignmentX(tableX);
      //element, col, row
      scoreTable.setColumnSelectionAllowed(true);
      cellEditor=rowIdentifier.getCellEditor();
      rowIdentifier.setResizable(false);
      scoreTable.setDragEnabled(false);
      scoreTable.setModel(tableStyle);
      
      for(int i=0;i<numOfPlayers;i++)
      {
         temp=new TableColumn();
         temp.setIdentifier(names[i]);
      }
      
      for(int i=0;i<titles.length;i++)
      {
        scoreTable.setValueAt(titles[i], i, 0);
      }
      
//      sets values of player
        for(int i=0;i<numOfPlayers;i++)
            for(int j=0;j<ROW_NUM-1;j++)
                if(j==15)
                {
                    scoreArray[j][i]=0;
                }
                else
                    scoreArray[j][i]=-1;
            
      
      clearBoxes(-1);

    }
    
    /**
     * handles population and calculation of player scores immediately after each roll
     * yahtzee mechanic and calculation needs to be worked on
     */
    private void updateBoxes() 
    {
//        just a reminder of the choices
//        "Ones", "Twos", "Threes", "Fours", "Fives","Sixes", "Sum",
//        "Bonus", "Three of a Kind", "Four of a Kind", "Full House", "Small straight",
//        "Large straight", "Chance", "YAHTZE", "TOTAL SCORE"};
        int[] counts={0, 0, 0, 0, 0, 0};
        int sum=0;
        boolean change=false;
        
        
        
        for(int i=0;i<numbers.length;i++)
        {
            //offset by 1 the index of the spot for said number is represented by the array index 1 less than its value since indixing start at 0
            counts[(numbers[i]-1)]++;
        }
//        fills ones-Sixes
        for(int i=0;i<counts.length;i++)
        {
            sum+=(counts[i]*(i+1));
            if(scoreArray[i][playerTurn-1]==-1&&(counts[i]!=0))
            {   
                scoreTable.setValueAt(counts[i]*(i+1), i, playerTurn);
                change=true;
            }
        }
//        fills sum row is 6
            if(scoreArray[6][playerTurn-1]==-1)
            {
                scoreTable.setValueAt(sum,6, playerTurn);
                change=true;
            }
            
//        fills bonus 
//        if scores from ones - sixes added together is >=63 row is 7

        if(scoreTable.getValueAt(7, playerTurn).equals("")&&rounds==15);
        {
            boolean temp=true;
            int total=0;
            for(int i=0;i<6;i++)
            {
                if(scoreArray[i][playerTurn-1]!=-1)
                {   
                    total+=scoreArray[i][playerTurn-1];
                }
                else
                {
                    temp=false;
                    break;
                }
            }
                if(temp)
                    if(total>=63)
                    {
                        scoreArray[7][playerTurn-1]=35;
                        scoreTable.setValueAt(35,7, playerTurn);
                    }
                    else
                    {
                        scoreArray[7][playerTurn-1]=0;
                        scoreTable.setValueAt(0,7, playerTurn);
                    }
        }

//        fills 3 and 4 of a kind rows are 8 and 9
        for(int i=0;i<counts.length;i++)
        {
            if(counts[i]==2)
                {
                    aDouble=true;
                }
            if(scoreArray[8][playerTurn-1]==-1)
            {
                    if(counts[i]>=3)
                    {
                        System.out.println("3 of k");
                        scoreTable.setValueAt(sum, 8, playerTurn);
                        change=true;
                    }
            }
            if(scoreArray[9][playerTurn-1]==-1)
            {
                    if(counts[i]>=4)
                    {
                        System.out.println("4 of k");
                        scoreTable.setValueAt(sum, 9, playerTurn);
                        change=true;
                        aTriple=true;
                    }
            }
  
            //        fills yahtzee(5 of a kind) row is 13
            if(counts[i]==5)
                {
                if((scoreArray[13][playerTurn-1]==-1||scoreArray[13][playerTurn-1]%50==0)&&scoreArray[13][playerTurn-1]!=0)
                    {
                    System.out.println("Yahtzee");
                    if(scoreArray[13][playerTurn-1]==-1)
                        scoreTable.setValueAt(50, 14, playerTurn);
                    else
                    {
                        //handles points multiple yahtzee scores                      
                        scoreTable.setValueAt((Integer.parseInt(scoreTable.getValueAt(14, playerTurn).toString())+100), 14, playerTurn);
                        //handles yahtzee joker fill
                        /**
                        * You can also use subsequent Yahtzee's as jokers in the lower scores section, provided the following criteria have been satisfied:
                        * You have scored a zero or 50 in the Yahtzee category.
                        * You have filled the corresponding category in the upper scores section. For example, if you have rolled:
                        *    the Fives category must also be filled.
                        * If this is the case, you can use the Yahtzee as a joker to fill in any lower scores category.   
                        * You score the category as normal. 
                        * Thus for the Small Straight, Large Straight, and Full House categories, you would score 30, 40, and 25 points respectively.
                        *           For the 3 of a Kind, 4 of a Kind, and Chance categories, you would score the total of the die face
                        */
                        
                    }
                    change=true;
                    }    
                }
            
        }

//        fills full house, row is 10
       if(aDouble&&aTriple&&scoreArray[10][playerTurn-1]==-1)
       {
           scoreTable.setValueAt(25,10, playerTurn);
           change=true;
       }

//        fills small 30 and large straight 40 rows are 11 and 12
        for(int i=0;i<=2;i++)
            {
              // if there are more than 2 of anything there cant be a small straight
              if(!(counts[i]>2))
                if(scoreArray[11][playerTurn-1]==-1)
                {
                        for(int j=0;j<4;j++)
                            {
                            if(j==3)
                            {
                                scoreTable.setValueAt(30, 11, playerTurn);
                                change=true;
                            }
                            else if(counts[i+j]==1)
                            {}
                            else
                            {
                                break;
                            }
                        }
                }
              // if there is more than 1 of anything there cant be a large straight
              if((!(counts[i]>1))&&i<2)
                if(scoreArray[12][playerTurn-1]==-1)
                {
                        for(int j=0;j<5;j++)
                            {
                            if(j==4)
                            {
                                scoreTable.setValueAt(40, 12, playerTurn);
                                change=true;
                            }
                            else if(counts[i+j]==1)
                            {}
                            else
                            {
                                break;
                            }
                        }
                }
            }
        
//        fills chance row is 13
            if(scoreArray[13][playerTurn-1]==-1)
            {
                scoreTable.setValueAt(sum,13, playerTurn);
                change=true;
            }


            
        
        
    }
    /**
     * clears boxes to either the players stored values or completely wipes the board depending on the value of type
     * -1 wipes the board completely
     * all other values clear to the board to previously stored scores plus the new score
     * @param type 
     */
    private void clearBoxes(int type)
    {
        
        
        String temp;
        if(type==-1)
        {
            for(int i=0;i<numOfPlayers;i++)
                for(int j=0;j<ROW_NUM-1;j++)
                    scoreTable.setValueAt("", j, i+1);
        }
        else
        {
                for(int j=0;j<ROW_NUM-2;j++)
                {
                    if(scoreArray[j][playerTurn-1]==-1)
                    {
                        scoreTable.setValueAt("", j, playerTurn);
                    }
                    else
                    {
//                        scoreTable.setValueAt(scoreArray[j][playerTurn-1], j+1, playerTurn);
                    }
                }
            
        }
    }
    /**
     * stores total in the array of player scores and handles looping through player turns
     * when turns is 16 it calls the gameOver Method
     * 
     * @param score 
     */
    private void nextPlayer(int score)
    {
        rolls=0;
        playerTurn++;
        System.out.println(score);
        scoreTable.setValueAt(score, 15, playerTurn-1);//scoreArray[15][playerTurn-1]==-1, 15, playerTurn-1
//        for testing
            numOfPlayers=1;
        if(playerTurn>numOfPlayers)
        {
            if(rounds==16)
            {
                gameOver();
            }
            playerTurn=1;
            rounds++;
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable scoreTable;
    private javax.swing.JTextArea scoresBox;
    // End of variables declaration//GEN-END:variables

    /**
     * compares totals and prints winners name
     */
    private void gameOver() 
    {
        int winnerIndex=1;
        for(int i=1;i<numOfPlayers;i++)
        {
            if(scoreArray[15][i-1]>scoreArray[15][winnerIndex])
            {
                winnerIndex=i;
            }
        }
        System.out.println(names[winnerIndex]+" is the winner");
    }


}